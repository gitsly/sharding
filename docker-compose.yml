# Sharding tutorial
# https://dzone.com/articles/composing-a-sharded-mongodb-on-docker

# mongo shell
# https://flaviocopes.com/mongodb/

# Shard: Each shard contains a subset of the sharded data. Each shard can be
# deployed as a replica set.

# Mongos (router): The mongos acts as query routers, providing an interface
# between client applications and the sharded cluster.

# Config servers: Config servers store metadata and configuration settings for
# the cluster.


#Mongod port defaults
#    27017 if mongod is not a shard member or a config server member
#    27018 if mongod is a shard member
#    27019 if mongod is a config server member

#
# [Router] [Router]
#      \    /
#       \  /
#        \/
#        |\
#        | \
#        |  \[Config servers, replica set]
#        |  / 
#        | / 
#        |/
#        /\  
#       /  \  
#      /    \  
# [Shard]   [Shard]



# db version v4.0.8

# Useful mongo shell commands within the docker instances
# db.isMaster() -> Returns useful information about an instance

################################################################################
# Define Shards: Each shard contains a subset of the sharded data. Each shard can
# be deployed as a replica set.

# Note the
# --replSet mongors1
# 'mongors1' Would indicate the replicaSet (maintains one common set of the data)

# We will build a replica set with these three nodes... 
# A replica set is a group of mongod instances that maintain the same data set.
################################################################################

# To initialize the repliace set, on only one instance do (from mongo shell):
# rs.initiate( {
#    _id : "rs0",
#    members: [
#       { _id: 0, host: "replica1:27017" },
#       { _id: 1, host: "replica2:27017" },
#    ]
# })

version: '2'
services:
  replica1:
    container_name: replica1
    image: mongo
    command: mongod --replSet myReplicaSet --dbpath /data/db --port 27017
    ports:
      # Host : Container
      - 27017:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./replication/data1:/data/db
      # Add scripts folder to initialize the replicaset, exec these from within
      # the container with mongo < initreplica.js
      - ./scripts:/scripts:ro
  replica2:
    container_name: replica2
    image: mongo
    command: mongod --replSet myReplicaSet --dbpath /data/db --port 27017
    ports:
      - 27027:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./replication/data2:/data/db

# Observations, logging into a replica node with 'mongo' shell, clearly shows
# the status of the node in the replica set e.g. promt for secondary replica in
# the set shows like:
#    myReplicaSet:SECONDARY>
#
# vs:
# myReplicaSet:PRIMARY>

